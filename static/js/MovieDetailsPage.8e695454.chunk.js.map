{"version":3,"sources":["services/fetchMovie.js","components/Button/Button.styled.jsx","components/Button/Button.jsx","components/Description/Description.styled.jsx","components/Description/Description.jsx","views/MovieDetailsPage.jsx"],"names":["axios","defaults","baseURL","params","api_key","fetchMoviesTrending","a","get","fetchMovieSearch","query","fetchMovieDetails","id","movie_id","fetchMovieCredits","fetchMovieReviews","ButtonStyle","styled","button","Button","title","onClick","type","DescriptionContainer","div","DescriptionContainerItem","DescriptionList","DescriptionTitle","h2","DescriptionGenres","DescriptionGenresItem","li","DescriptionListItem","p","Description","props","poster","overview","genres","url","useRouteMatch","src","alt","map","name","to","Cast","lazy","Reviews","MovieDetailsPage","movieId","useParams","goBack","useHistory","useState","setOverview","setTitle","setPoster","setGenres","useEffect","then","response","getPoster","data","poster_path","finally","posterPath","fallback","color","height","width","timeout","path","idMovie"],"mappings":"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","file":"static/js/MovieDetailsPage.8e695454.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst BASE_URL = 'https://api.themoviedb.org/3';\r\nconst API_KEY = '85bec31195c6b42626a6d2b2aafa09e6';\r\n\r\naxios.defaults.baseURL = BASE_URL;\r\naxios.defaults.params = {\r\n  api_key: API_KEY,\r\n};\r\n\r\nconst fetchMoviesTrending = async () => {\r\n  return await axios.get('/trending/movie/day');\r\n};\r\n\r\nconst fetchMovieSearch = async ({ query }) => {\r\n  return await axios.get('/search/movie', {\r\n    params: {\r\n      query: query,\r\n    },\r\n  });\r\n};\r\n\r\nconst fetchMovieDetails = async id => {\r\n  return await axios.get(`/movie/${id}`, {\r\n    params: {\r\n      movie_id: id,\r\n    },\r\n  });\r\n};\r\n\r\nconst fetchMovieCredits = async id => {\r\n  return await axios.get(`/movie/${id}/credits`);\r\n};\r\n\r\nconst fetchMovieReviews = async id => {\r\n  return await axios.get(`/movie/${id}/reviews`);\r\n};\r\n\r\n// const fetchGenres = async ({ id }) => {\r\n//   return await axios.get(`/movie/${id}/reviews`);\r\n// };\r\n\r\nexport {\r\n  fetchMoviesTrending,\r\n  fetchMovieSearch,\r\n  fetchMovieDetails,\r\n  fetchMovieCredits,\r\n  fetchMovieReviews,\r\n};\r\n","import styled from '@emotion/styled';\r\n\r\nexport const ButtonStyle = styled.button`\r\n  margin-left: 10px;\r\n  padding: 8px 16px;\r\n  border-radius: 2px;\r\n  background-color: #33cccc;\r\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n  text-align: center;\r\n  display: inline-block;\r\n  color: #fff;\r\n  border: 0;\r\n  border-radius: 5px;\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n  font-family: inherit;\r\n  font-size: 18px;\r\n  line-height: 24px;\r\n  font-style: normal;\r\n  font-weight: 500;\r\n  min-width: 180px;\r\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),\r\n    0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\r\n  &::hover,\r\n  :focus {\r\n    background-color: #006363;\r\n  }\r\n`;\r\n","import { ButtonStyle } from './Button.styled';\r\nexport default function Button({ title, onClick }) {\r\n  return (\r\n    <ButtonStyle type=\"submit\" onClick={onClick}>\r\n      {title}\r\n    </ButtonStyle>\r\n  );\r\n}\r\n","import styled from '@emotion/styled';\r\n\r\nexport const DescriptionContainer = styled.div`\r\n  display: flex;\r\n  padding: 15px;\r\n`;\r\nexport const DescriptionContainerItem = styled.div`\r\n  padding: 15px;\r\n  list-style: none;\r\n`;\r\n\r\nexport const DescriptionList = styled.div`\r\n  list-style: none;\r\n  font-size: 20px;\r\n`;\r\nexport const DescriptionTitle = styled.h2`\r\n  font-size: 26px;\r\n`;\r\n\r\nexport const DescriptionGenres = styled.div`\r\n  dislay: flex;\r\n  list-style: none;\r\n  font-size: 20px;\r\n`;\r\n\r\nexport const DescriptionGenresItem = styled.li`\r\n  display: inline-block;\r\n  padding: 10px;\r\n  margin-right: 5px;\r\n`;\r\n\r\nexport const DescriptionListItem = styled.p`\r\n  padding: 5px;\r\n  width: 180px;\r\n  background-color: #5ccccc;\r\n  margin-right: 10px;\r\n  border-radius: 5px;\r\n  text-align: center;\r\n`;\r\n","import { useRouteMatch } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n  DescriptionContainer,\r\n  DescriptionList,\r\n  DescriptionTitle,\r\n  DescriptionContainerItem,\r\n  DescriptionGenres,\r\n  DescriptionGenresItem,\r\n  DescriptionListItem,\r\n} from './Description.styled';\r\nexport default function Description(props) {\r\n  const { poster, title, overview, genres } = props;\r\n  const { url } = useRouteMatch();\r\n  return (\r\n    <DescriptionContainer>\r\n      <img src={poster} alt=\"\" />\r\n      <DescriptionContainerItem>\r\n        <DescriptionTitle>{title}</DescriptionTitle>\r\n        <DescriptionList>\r\n          <li>\r\n            <h3>Overview</h3>\r\n            <p>{overview}</p>\r\n          </li>\r\n          <li>\r\n            <h3>Genres</h3>\r\n            <DescriptionGenres>\r\n              {genres.map(({ name }) => (\r\n                <DescriptionGenresItem>{name}</DescriptionGenresItem>\r\n              ))}\r\n            </DescriptionGenres>\r\n          </li>\r\n          <li>\r\n            <h3>Additional information</h3>\r\n            <DescriptionList>\r\n              <DescriptionListItem>\r\n                <Link to={`${url}/cast`}>Cast</Link>\r\n              </DescriptionListItem>\r\n              <DescriptionListItem>\r\n                <Link to={`${url}/reviews`}>Reviews</Link>\r\n              </DescriptionListItem>\r\n            </DescriptionList>\r\n          </li>\r\n        </DescriptionList>\r\n      </DescriptionContainerItem>\r\n    </DescriptionContainer>\r\n  );\r\n}\r\n","import { useState, useEffect, lazy, Suspense } from 'react';\r\nimport { useParams, useRouteMatch, useHistory } from 'react-router';\r\nimport { Link, Route } from 'react-router-dom';\r\nimport Loader from 'react-loader-spinner';\r\nimport { fetchMovieDetails } from '../services/fetchMovie';\r\nimport Button from '../components/Button/Button';\r\nimport Description from '../components/Description/Description';\r\nconst Cast = lazy(() => import('./Cast.jsx' /*webpackChunkName: \"Cast\"*/));\r\nconst Reviews = lazy(() =>\r\n  import('./Reviews.jsx' /*webpackChunkName: \"Reviews\"*/),\r\n);\r\nexport default function MovieDetailsPage({ query }) {\r\n  const { url } = useRouteMatch();\r\n  const { movieId } = useParams();\r\n  const { goBack } = useHistory();\r\n  const [overview, setOverview] = useState('');\r\n  const [title, setTitle] = useState('');\r\n  const [poster, setPoster] = useState(\r\n    'https://dummyimage.com/200x300/f0ede4/000333.png&text=No+poster',\r\n  );\r\n  const [genres, setGenres] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (title === '') {\r\n      fetchMovieDetails(movieId)\r\n        .then(response => {\r\n          getPoster(response.data.poster_path);\r\n          setTitle(() => response.data.title);\r\n          setOverview(() => response.data.overview);\r\n          setGenres(() => response.data.genres);\r\n        })\r\n        .finally();\r\n    }\r\n  });\r\n  const getPoster = posterPath => {\r\n    const urlPoster = 'https://image.tmdb.org/t/p/w300/';\r\n    setPoster(urlPoster + posterPath);\r\n  };\r\n  return (\r\n    <div>\r\n      <Link to={`${url}`}>\r\n        <Button title={'Go back'} onClick={goBack} />\r\n      </Link>\r\n      <Description\r\n        poster={poster}\r\n        title={title}\r\n        overview={overview}\r\n        genres={genres}\r\n      />\r\n      <Suspense\r\n        fallback={\r\n          <Loader\r\n            type=\"Puff\"\r\n            color=\"#00BFFF\"\r\n            height={100}\r\n            width={100}\r\n            timeout={3000}\r\n          />\r\n        }\r\n      >\r\n        <Route path={`${url}/cast`}>\r\n          <Cast idMovie={movieId} />\r\n        </Route>\r\n        <Route path={`${url}/reviews`}>\r\n          <Reviews idMovie={movieId} />\r\n        </Route>\r\n      </Suspense>\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}